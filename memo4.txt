Constants(상수)

한번 선언하면 값을 변경할 수 없음 immutable
- security
- thread safety
- reduce human mistakes

mutable - let
immutable - const

변수 타입

primative, single item: number, string, boolean...
object, box container
function, first-class function

함수 또한 변수에 할당이 가능
함수 타입으로 리턴도 가능

JS에는 number 로 선언한다면 숫자의 크기 상관 없이 사용 가능
생략도 가능!
number 대신 let을 사용해 선언하면 됨

TS 에서는
let a:number = 1;
이런 식으로 let 뒤에 타입 명시 해줌

const infinity = 1/0;
(숫자를 0으로 나누면 무한대)
const negativeInfinity = -1/0;
(음수를 0으로 나누면 무한소)
const nAn = 'not a number'/2;

const bigInt = 12321312312312312313123n;
숫자 뒤에 n을 붙이면 bigint로 선언 가능(새로 추가됨)

string
const char = 'c';
const bredan = 'bredan';
const greeting = 'hello ' + brendan;
const helloBob = `hi ${brendan}!`; 
(backtag 을 이용하면 +를 이용하지 않고도 문자열에 변수값을 더해줄 수 있음)

boolean
false : 0,nul,undefined,NaN,''
true : any other value

null
let nothing = null;
- 명확하게 비어있는 empty 값일 때 null로 할당

undefined
let x = undefined;
- 선언은 되어있지만 아무런 값도 할당하지 않았을 때

symbol
const symbol1 = Symbol('id');
const symbol2 = Symbol('id');
특별한 식별자가 필요할 시 사용하면
동일한 String으로 작성하여도 고유한 식별자로 동작함
const gSymbol1 = Symbol.for('id');
const gSymbol = Symbol.for('id');
위와 같이 선언하면 동일한 String을 동일한 식별자로 사용 가능

